@page "/cSharpClassesFromJson"
@using JsonToCSharpClasses;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using Xamasoft.JsonClassGenerator;


<RadzenCard>
    <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H6" class="mb-0">Create c# classes</RadzenText>
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="build" class="mt-2 mb-4" Text="Get Classes"
                  Click="@GetClasses" />
   
    <RadzenColumn Size="12" SizeMD="12">
        <RadzenRow Gap="6rem" JustifyContent="JustifyContent.Center">

            <RadzenCard Style="width=40%">
                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.H3">Json Input</RadzenText>
                <RadzenTextArea Cols="80" Rows="17" @bind-Value=@_inputJson />
            </RadzenCard>

            <RadzenCard Style="width=40%">
                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.H3">C# Classes</RadzenText>
                <RadzenTextArea Cols="80" Rows="17" @bind-Value=@_cSharpClasses />
            </RadzenCard>
        </RadzenRow>
    </RadzenColumn>
    <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Info Log</RadzenText>
                <RadzenTextArea Rows="4" Disabled="true" @bind-Value=@_infomsgs class="w-100" />
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>





@code {

    private string _inputJson = "";
    private string _cSharpClasses = "";
    private string _infomsgs = "";

    async Task GetClasses()
    {
        try
        {
            string error = "";
            if (!IsValidJson(this._inputJson.Trim(), out error))
            {
                this._infomsgs = error;
                return;

            }
            Xamasoft.JsonClassGenerator.JsonClassGenerator jsonClassGenerator = new JsonClassGenerator();
            // Helper h = new Helper();
            // h.GenerateCSharp();
            // String jsonText = "{\r\n    \"name\": \"John Doe\"," +
            //         "\r\n    \"age\": 30,\r\n    \"email\": \"johndoe@example.com\"," +
            //         "\r\n    \"isSubscribed\": true,\r\n    \"address\": {\r\n        \"street\": \"123 Main St\",\r\n        \"city\": \"Anytown\",\r\n        \"zipcode\": \"12345\"\r\n    },\r\n    \"hobbies\": [\"reading\", \"hiking\", \"gaming\"]\r\n}";

            string srtClasses = jsonClassGenerator.GenerateClasses(this._inputJson.Trim(), out error).ToString();

            if (string.IsNullOrEmpty(srtClasses))
            {
                this._infomsgs = "Something went wrong. No classes created!";
                return;
            }
            else
            {
                this._cSharpClasses = srtClasses;

            }

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in GetClasses. Exception message:{exc.Message}";
        }
    }

    private  bool IsValidJson(string strInput,out string err)
    {
        err = "";
        if (string.IsNullOrWhiteSpace(strInput))
        {
            err = "Json Input is empty.";
            return false; 
        }
        strInput = strInput.Trim();
        if ((strInput.StartsWith("{") && strInput.EndsWith("}")) || //For object
            (strInput.StartsWith("[") && strInput.EndsWith("]"))) //For array
        {
            try
            {
                var obj = JToken.Parse(strInput);
                return true;
            }
            catch (JsonReaderException jex)
            {
                //Exception in parsing json
                err = jex.Message;
                return false;
            }
            catch (Exception ex) //some other exception
            {
                err = ex.ToString();
                return false;
            }
        }
        else
        {
            return false;
        }
    }
}
