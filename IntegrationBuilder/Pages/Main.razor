@inject IConfiguration configuration
@using IntegrationBuilder.SQLServerUtilities;
@using IntegrationBuilder.VannaAIUtilities;
@using Microsoft.EntityFrameworkCore
@using System.Text;
@page "/main"



<RadzenTabs TabPosition="@TabPosition.Right">
    <Tabs>
        <RadzenTabsItem Text="Connect/Train Vanna Model">


        </RadzenTabsItem>
        <RadzenTabsItem Text="Get Classes from Json" Disabled="@(_step2disabled)">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">2. Hello From Step 2</RadzenText>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Create mapping" Disabled="@(_step3disabled)">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">2. Hello From Step 3</RadzenText>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code {

    private bool _step2disabled;
    private bool _step3disabled;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this._step2disabled = true;
        this._step3disabled = true;

       
        _sqlServerCredentials = new Credentials();
        _vannaModel = new VannaModel();
        _vannaUtilitiesService = new VannaUtilitiesService();
        _tableDDLDocumentations = new List<DDLDocumentation>();
        _viewDDLDocumentations = new List<DDLDocumentation>();
        _sqlStatementForTrain = "";
        _documentationForTrain = "";

        
    }

    void OnChange(int index)
    {
        //console.Log($"Step with index {index} was selected.");

        if (index == 1)
        {
         
        }
        else if (index == 2)
        {
            
        }
    }
}


@code {

    private Credentials _sqlServerCredentials;
    private VannaModel _vannaModel;

    private VannaUtilitiesService _vannaUtilitiesService;

    private string _infomsgs;
    private bool _DisabledStep2 = true;
    private bool _DisabledStep3 = true;
    private bool _DisabledStep4 = true;

    TabPosition tabPosition = TabPosition.Top;

    private List<string> _allTables;
    //private List<string> _selectedTables;

    private List<string> _allViews;
    //private List<string> _selectedViews;

    private string _userQuestion = "";
    private string _vannaResponse = "";

    private List<DDLDocumentation> _tableDDLDocumentations;
    private List<DDLDocumentation> _viewDDLDocumentations;
    private string _sqlStatementForTrain;
    private string _documentationForTrain;

    RadzenDataGrid<DDLDocumentation> _tableDDLDocumentationsGrid;
    RadzenDataGrid<DDLDocumentation> _viewDDLDocumentationsGrid;

    DDLDocumentation _tableDocumentationToInsert;
    DDLDocumentation _tableDocumentationToUpdate;
    DDLDocumentation _tableDocumentationSafe;

    DDLDocumentation _viewDocumentationToInsert;
    DDLDocumentation _viewDocumentationToUpdate;
    DDLDocumentation _viewDocumentationSafe;

    //General Code
    // protected override async Task OnInitializedAsync()
    // {
    //     await base.OnInitializedAsync();
    //     _sqlServerCredentials = new Credentials();
    //     _vannaModel = new VannaModel();
    //     _vannaUtilitiesService = new VannaUtilitiesService();
    //     _tableDDLDocumentations = new List<DDLDocumentation>();
    //     _viewDDLDocumentations = new List<DDLDocumentation>();
    //     _sqlStatementForTrain = "";
    //     _documentationForTrain = "";

    // }

    void OnChangeTab(int index)
    {
        //console.Log($"Tab with index {index} was selected.");
    }

    private bool GetAllInitialDataForStep3()
    {
        try
        {
            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:getAllTableNames"].ToString());
            string error = "";

            this._allTables = _vannaUtilitiesService.GetInfosFromDB(urlBuilder.ToString(), this._sqlServerCredentials, out error);
            if (this._allTables == null)
            {
                this._infomsgs = $"GetInfosFromDB returns null. Error message: {error}";
                return false;
            }
            urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:getAllViewNames"].ToString());

            this._allViews = _vannaUtilitiesService.GetInfosFromDB(urlBuilder.ToString(), this._sqlServerCredentials, out error);
            if (this._allViews == null)
            {
                this._infomsgs = $"GetInfosFromDB returns null. Error message: {error}";
                return false;
            }

            DDLDocumentation d = new DDLDocumentation();
            return true;

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in GetAllInitialData. Exception message: {exc.Message}";
            return false;
        }
    }

    private void OnChangeStep(int index)
    {
        this._infomsgs = String.Empty;
        if (index == 1)
        {

        }
        else if (index == 2)
        {

        }
    }

    //Step 1 Code
    private void CheckConnection(Credentials arg)
    {
        //Code Only For Windows Authentication
        this._infomsgs = "";
        try
        {

            string error = "";
            bool connSuccess = SQLServerLib.CheckConnection(this._sqlServerCredentials.Server.Trim(),
                                                            this._sqlServerCredentials.Database.Trim(), out error);
            if (connSuccess)
            {
                this._infomsgs = "Connect to database Success!";
                this._DisabledStep2 = false;

            }
            else
            {
                this._infomsgs = $"Connect to database Failed. Error message: {error}";
            }
        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in CheckConnection. Exception message: {exc.Message}";
        }
    }


    ///--------------------------------------------------------///
    ///--------------------------------------------------------///
    ///--------------------------------------------------------///

    //Step 2 Code
    private void CreateOrSetModel(VannaModel arg)
    {
        //Code Only For Windows Authentication
        this._infomsgs = "";
        try
        {
            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            _vannaModel.ModelName = _vannaModel.ModelName.ToLower();
            if (this._vannaModel.NewModel)
            {
                urlBuilder.Append(configuration["ApplicationInfo:createModelService"].ToString());
                string error = "";
                if (_vannaUtilitiesService.CheckIfVannaModelExistOrCreated(urlBuilder.ToString(), this._vannaModel.ModelName.ToLower(), out error))
                {
                    _infomsgs = $"The model {this._vannaModel.ModelName} Created. You can use it!";

                    if (GetAllInitialDataForStep3())
                    {
                        _infomsgs += "\n" + "Initial data for Step 3 are set";
                        this._DisabledStep3 = false;
                        this._DisabledStep4 = false;
                    }
                }
                else
                {
                    this._DisabledStep3 = true;
                    this._DisabledStep4 = true;
                    _infomsgs = $"Something went wrong. Error message: {error}. If the name exists try amother name." +
                    "If you want to use an existing model deselect the Create Model option and try again!";
                }
            }
            else
            {
                urlBuilder.Append(configuration["ApplicationInfo:checkIfModelExistService"].ToString());
                string error = "";
                //Vanna saves the model names with lower characters
                if (_vannaUtilitiesService.CheckIfVannaModelExistOrCreated(urlBuilder.ToString(), this._vannaModel.ModelName.ToLower(), out error))
                {
                    _infomsgs = $"The model {this._vannaModel.ModelName} Exist. You can use it!";
                    if (GetAllInitialDataForStep3())
                    {
                        _infomsgs += "\n" + "Initial data for Step 3 are set";
                        this._DisabledStep3 = false;
                        this._DisabledStep4 = false;
                    }

                }
                else
                {
                    this._DisabledStep3 = true;
                    this._DisabledStep4 = true;
                    _infomsgs = $"Something went wrong. Error message: {error}";
                }
            }

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in CreateOrSetModel. Exception message: {exc.Message}";
        }
    }

    //Step 3
    //Tables Grid Handling
    void ResetTableGenVars()
    {
        _tableDocumentationToInsert = null;
        _tableDocumentationToUpdate = null;
    }
    void ResetViewGenVars()
    {
        _viewDocumentationToInsert = null;
        _viewDocumentationToUpdate = null;
    }
    async Task EditRowTables(DDLDocumentation tdoc)
    {

        this._tableDocumentationSafe = new DDLDocumentation();
        _tableDocumentationSafe.documentation = tdoc.documentation;
        _tableDocumentationSafe.name = tdoc.name;

        this._tableDocumentationToUpdate = tdoc;
        await this._tableDDLDocumentationsGrid.EditRow(this._tableDocumentationToUpdate);
        //ResetTableGenVars();
    }
    async Task EditRowViews(DDLDocumentation tdoc)
    {
        this._viewDocumentationSafe = new DDLDocumentation();
        _viewDocumentationSafe.documentation = tdoc.documentation;
        _viewDocumentationSafe.name = tdoc.name;

        this._viewDocumentationToUpdate = tdoc;
        await this._viewDDLDocumentationsGrid.EditRow(this._viewDocumentationToUpdate);
        //ResetViewGenVars();
    }
    void OnUpdateRowTables(DDLDocumentation tdoc)
    {
        this._tableDocumentationToUpdate = tdoc;
        this._tableDDLDocumentationsGrid.Reload();
        ResetTableGenVars();

    }
    void OnUpdateRowViews(DDLDocumentation tdoc)
    {
        this._viewDocumentationToUpdate = tdoc;
        this._viewDDLDocumentationsGrid.Reload();
        ResetViewGenVars();
    }
    async Task SaveRowTables(DDLDocumentation tdoc)
    {
        if (string.IsNullOrEmpty(tdoc.name))
        {
            this._infomsgs = "Select Table to insert row!";
            return;
        }
        if (string.IsNullOrEmpty(tdoc.documentation))
        {
            this._infomsgs = "Add documentation to insert row!";
            return;
        }
        await this._tableDDLDocumentationsGrid.UpdateRow(tdoc);
    }
    async Task SaveRowViews(DDLDocumentation tdoc)
    {
        if (string.IsNullOrEmpty(tdoc.name))
        {
            this._infomsgs = "Select View to insert row!";
            return;
        }
        if (string.IsNullOrEmpty(tdoc.documentation))
        {
            this._infomsgs = "Add documentation to insert row!";
            return;
        }
        await this._viewDDLDocumentationsGrid.UpdateRow(tdoc);
    }
    void CancelEditTables(DDLDocumentation tdoc)
    {
        if (this._tableDDLDocumentations.Any(i => i.name.Equals(tdoc.name) && i.documentation.Equals(tdoc.documentation)))
        {
            int index = this._tableDDLDocumentations.FindIndex(i => i.name.Equals(tdoc.name) && i.documentation.Equals(tdoc.documentation));
            if (index != -1)
                this._tableDDLDocumentations[index] = this._tableDocumentationSafe;
            ResetTableGenVars();
            this._tableDDLDocumentationsGrid.CancelEditRow(tdoc);
            this._tableDDLDocumentationsGrid.Reload();
        }
        else
        {
            ResetTableGenVars();
            this._tableDDLDocumentationsGrid.CancelEditRow(tdoc);
            this._tableDDLDocumentationsGrid.Reload();
        }

    }
    void CancelEditViews(DDLDocumentation tdoc)
    {
        if (this._viewDDLDocumentations.Any(i => i.name.Equals(tdoc.name) && i.documentation.Equals(tdoc.documentation)))
        {
            int index = this._viewDDLDocumentations.FindIndex(i => i.name.Equals(tdoc.name) && i.documentation.Equals(tdoc.documentation));
            if (index != -1)
                this._viewDDLDocumentations[index] = this._viewDocumentationSafe;
            ResetViewGenVars();
            this._viewDDLDocumentationsGrid.CancelEditRow(tdoc);
            this._viewDDLDocumentationsGrid.Reload();
        }
        else
        {
            ResetViewGenVars();
            this._viewDDLDocumentationsGrid.CancelEditRow(tdoc);
            this._viewDDLDocumentationsGrid.Reload();
        }
    }
    async Task DeleteRowTables(DDLDocumentation tdoc)
    {
        ResetTableGenVars();

        if (this._tableDDLDocumentations.Contains(tdoc))
        {
            this._tableDDLDocumentations.Remove(tdoc);

            await this._tableDDLDocumentationsGrid.Reload();
        }
        else
        {
            this._tableDDLDocumentationsGrid.CancelEditRow(tdoc);
            await this._tableDDLDocumentationsGrid.Reload();
        }
    }
    async Task DeleteRowViews(DDLDocumentation tdoc)
    {
        ResetViewGenVars();

        if (this._viewDDLDocumentations.Contains(tdoc))
        {
            this._viewDDLDocumentations.Remove(tdoc);

            await this._viewDDLDocumentationsGrid.Reload();
        }
        else
        {
            this._viewDDLDocumentationsGrid.CancelEditRow(tdoc);
            await this._viewDDLDocumentationsGrid.Reload();
        }
    }
    async Task BtnTrainWithTables()
    {
        try
        {
            this._infomsgs = "";
            if (this._tableDDLDocumentations == null)
            {
                this._infomsgs = "_tableDDLDocumentations is null";
                return;
            }

            List<string> tableNames = new List<string>();
            List<string> documentation = new List<string>();
            foreach (DDLDocumentation d in this._tableDDLDocumentations)
            {
                tableNames.Add(d.name);
                documentation.Add(d.documentation);
            }

            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:trainWithTables"].ToString());
            string errorMsg = "";

            if (this._vannaUtilitiesService.TrainModelWithTables(urlBuilder.ToString(), tableNames.Distinct().ToList(), this._vannaModel.ModelName.ToLower(), this._sqlServerCredentials, out errorMsg))
            {
                this._infomsgs = "Train with tables OK. Now will start the training with Documentation!";
            }
            else
            {
                this._infomsgs = $"Something went wrong in Train with tables. Message: {errorMsg}";
                return;
            }


            TrainWithDocumentation(documentation);

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in BtnTrainWithTables. Exception message: {exc.Message}";
            return;
        }
    }

    async Task BtnTrainWithDocumentation()
    {
        try
        {
            this._infomsgs = "";

            if (string.IsNullOrEmpty(this._documentationForTrain))
            {
                this._infomsgs = "Add some documentation!";
                return;
            }

            List<string> tmp = new List<string>();
            tmp.Add(this._documentationForTrain);
            TrainWithDocumentation(tmp);
        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in BtnTrainWithDocumentation. Exception message: {exc.Message}";
        }

    }

    async Task BtnAskVanna()
    {
        try
        {
            this._infomsgs = "";
            this._vannaResponse = "";

            if (string.IsNullOrEmpty(this._userQuestion))
            {
                this._infomsgs = "Insert a Question!";
                return;
            }

            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:generateSQL"].ToString());

            string error = "";
            this._vannaResponse = this._vannaUtilitiesService.GenerateSQL(urlBuilder.ToString(), this._userQuestion, this._vannaModel.ModelName.ToLower(), out error);
            if (string.IsNullOrEmpty(this._vannaResponse))
            {
                this._infomsgs = $"Something went wrong in Vanna Generate SQL. Error message: {error}";
                return;
            }

        }
        catch (Exception exc)
        {
            _infomsgs = $"Exception in BtnAskVanna {exc.Message}.";
        }
    }

    async Task BtnTrainWithViews()
    {
        try
        {
            this._infomsgs = "";

            if (this._viewDDLDocumentations == null)
            {
                this._infomsgs = "_viewDDLDocumentations is null";
                return;
            }

            List<string> viewNames = new List<string>();
            List<string> documentation = new List<string>();
            foreach (DDLDocumentation d in this._viewDDLDocumentations)
            {
                viewNames.Add(d.name);
                documentation.Add(d.documentation);
            }

            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:trainWithViews"].ToString());
            string errorMsg = "";

            if (this._vannaUtilitiesService.TrainModelWithViews(urlBuilder.ToString(), viewNames.Distinct().ToList(), this._vannaModel.ModelName.ToLower(), this._sqlServerCredentials, out errorMsg))
            {
                this._infomsgs = "Train with views OK. Now will start the training with Documentation!";
            }
            else
            {
                this._infomsgs = $"Something went wrong in Train with views. Message: {errorMsg}";
                return;
            }

            TrainWithDocumentation(documentation);
        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in BtnTrainWithViews. Exception message: {exc.Message}";
            return;
        }
    }
    async Task BtnTrainWithSQL()
    {
        try
        {
            this._infomsgs = "";

            if (string.IsNullOrEmpty(this._sqlStatementForTrain))
            {
                this._infomsgs = "SQL field is empty!";
                return;
            }

            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:trainWithSQL"].ToString());
            string error = "";
            if (!this._vannaUtilitiesService.TrainWithDocumentation(urlBuilder.ToString(), this._sqlStatementForTrain.Trim(), this._vannaModel.ModelName.ToLower(), out error))
            {
                this._infomsgs += "\n" + $"Problem in BtnTrainWithSQL {this._sqlStatementForTrain.Trim()}.\n Exception message: {error}";
            }
            else
            {
                this._infomsgs += $"Training with SQL Ok";
            }
        }
        catch (Exception exc)
        {
            _infomsgs = $"Exception in BtnTrainWithSQL. Exception message: {exc.Message}";
        }
    }
    private void TrainWithDocumentation(List<string> documentation)
    {
        try
        {
            this._infomsgs = "";

            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:trainWithDocumentation"].ToString());

            foreach (string doc in documentation)
            {
                string error = "";
                if (!this._vannaUtilitiesService.TrainWithDocumentation(urlBuilder.ToString(), doc, this._vannaModel.ModelName.ToLower(), out error))
                {
                    this._infomsgs += "\n" + $"Problem in train with documentation {doc}.\n Exception message: {error}";
                    return;
                }
            }
            this._infomsgs += "\n" + "Train with Documentation Ok";
        }
        catch (Exception exc)
        {
            this._infomsgs += "\n" + $"Exception in TrainWithDocumentation. Exception message:{exc.Message}";
        }

    }
    async Task InsertRowTable()
    {
        this._tableDocumentationToInsert = new DDLDocumentation();
        await this._tableDDLDocumentationsGrid.InsertRow(this._tableDocumentationToInsert);
    }
    async Task InsertRowView()
    {
        this._viewDocumentationToInsert = new DDLDocumentation();
        await this._viewDDLDocumentationsGrid.InsertRow(this._viewDocumentationToInsert);
    }
    void OnCreateRowTables(DDLDocumentation tdoc)
    {
        this._tableDocumentationToInsert = tdoc;
        this._tableDDLDocumentations.Add(this._tableDocumentationToInsert);
        ResetTableGenVars();
        this._tableDDLDocumentationsGrid.Reload();
    }
    void OnCreateRowViews(DDLDocumentation tdoc)
    {
        this._viewDocumentationToInsert = tdoc;
        this._viewDDLDocumentations.Add(this._viewDocumentationToInsert);
        ResetViewGenVars();
        this._viewDDLDocumentationsGrid.Reload();
    }

    //Step 4
    //
}