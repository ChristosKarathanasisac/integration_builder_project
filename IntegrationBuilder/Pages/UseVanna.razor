@page "/usevanna"
@using IntegrationBuilder.SQLServerUtilities;
@using IntegrationBuilder.VannaAIUtilities;
@using Microsoft.EntityFrameworkCore 
@using System.Text;
@inject IConfiguration configuration

<RadzenSteps Change=@OnChangeStep>
    <Steps>
        <RadzenStepsItem Text="Connect To SQL Server">
            <RadzenTemplateForm TItem="Credentials"  Data=@_sqlServerCredentials Submit=@CheckConnection>
                
                <RadzenFieldset Class="rz-color-secondary" Text="Connect To SQL Server" >
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="9" SizeMD="3">
                    <RadzenStack>
                        <RadzenLabel Component="Server" Text="Server" />
                                <RadzenTextBox Name="Server" @bind-Value=@_sqlServerCredentials.Server />
                            <RadzenRequiredValidator Component="Server" Text="Server is required!" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center" >
                    <RadzenColumn Size="9" SizeMD="3">
                    <RadzenStack>
                        <RadzenLabel Component="Database" Text="Database" Class="rz-info-light" />
                                <RadzenTextBox Name="Database" @bind-Value=@_sqlServerCredentials.Database />
                            <RadzenRequiredValidator Component="Database" Text="Database is required!" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Check Connection" />
                </RadzenStack>
                    <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Center">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenCard>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Info Log</RadzenText>
                                <RadzenTextArea Disabled="true" @bind-Value=@_infomsgs class="w-100" />
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                    
                </RadzenFieldset>
            </RadzenTemplateForm>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Create/Set Vanna AI Model" Disabled="@_DisabledStep2">
            <RadzenTemplateForm TItem="VannaModel" Data=@this._vannaModel Submit=@CreateOrSetModel>

                <RadzenFieldset Class="rz-color-secondary" Text="Create/Set Vanna AI Model">
                    <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                        <RadzenColumn Size="9" SizeMD="3">
                            <RadzenStack>
                                <RadzenLabel Component="ModelName" Text="Vanna model" />
                                <RadzenTextBox Name="ModelName" @bind-Value=@_vannaModel.ModelName />
                                <RadzenRequiredValidator Component="ModelName" Text="Vanna model is required!" />
                           
                                <div class="rz-p-4 rz-text-align-center">
                                    <RadzenCheckBox @bind-Value=@_vannaModel.NewModel Name="isNewModel" />
                                    <RadzenLabel Text="Create New Model" Component="isNewModel" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Create/Set Model" />
                        @if (_isLoadingConnectToVanna)
                        {
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                    </RadzenStack>
                    <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Center">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenCard>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Info Log</RadzenText>
                                <RadzenTextArea Disabled="true" @bind-Value=@_infomsgs class="w-100" />
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>

                </RadzenFieldset>
            </RadzenTemplateForm>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Train Your Model" Disabled="@_DisabledStep3">
            <RadzenCard>
                @if ((this._allTables != null) && (_allViews != null))
                {
                    <RadzenTabs Change=@OnChangeTab TabPosition="@tabPosition" RenderMode="TabRenderMode.Client" >
                     <Tabs>
                         <RadzenTabsItem Text="Train With Tables">
                    <RadzenCard class="rz-background-color-base-900 rz-color-on-info-lighter rz-p-2">
                        
                        <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H6" class="mb-0">Train with Tables</RadzenText>

                                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="build" class="mt-2 mb-4" Text="Train Model"
                                                  Click="@BtnTrainWithTables" Disabled=@((this._tableDDLDocumentations == null) || (this._tableDDLDocumentations.Count<1)) />

                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add Table Documentation"
                                      Click="@InsertRowTable" Disabled=@(this._tableDocumentationToInsert != null || this._tableDocumentationToUpdate != null) />

                                    @if (_isLoadingTrainWithTables)
                                    {
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    }

                        <RadzenDataGrid @ref="_tableDDLDocumentationsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true"
                                                    PageSize="3" AllowSorting="true" EditMode="DataGridEditMode.Single" FilterMode="FilterMode.Advanced"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data="@_tableDDLDocumentations" TItem="DDLDocumentation" RowUpdate="@OnUpdateRowTables"
                                        RowCreate="@OnCreateRowTables" Sort="@ResetTableGenVars" Page="@ResetTableGenVars" Filter="@ResetTableGenVars" 
                                                    
                                        class="rz-background-color-base-900 rz-color-on-info-lighter rz-p-2">

                            <Columns>
                                <RadzenDataGridColumn TItem="DDLDocumentation" Property="name" Title="Table Name" Width="20%">
                                
                                    <EditTemplate Context="tname">
                                                    <RadzenDropDownDataGrid @bind-Value=@tname.name Data=@this._allTables 
                                                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive "
                                                        AllowClear=true Placeholder="Select Table" AllowFiltering="true" Chips="true" PageSize="4" ShowPagingSummary="true"
                                                                            class="rz-background-color-base-200 rz-color-on-info-lighter">

                                        </RadzenDropDownDataGrid>
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="DDLDocumentation" Property="documentation" Title="documentation" Width="60%">
                                    <Template Context="data">
                                        <RadzenTextArea ReadOnly="@((this._tableDocumentationToUpdate == null) && (this._tableDocumentationToInsert == null))"@bind-Value="@data.documentation" Style="width: 100%;" />
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="DDLDocumentation" Context="doc" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                    <Template Context="doc">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRowTables(doc))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowTables(doc))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                    </Template>
                                    <EditTemplate Context="doc">
                                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRowTables(doc))">
                                        </RadzenButton>
                                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEditTables(doc))">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowTables(doc))">
                                        </RadzenButton>
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenCard>
                            </RadzenTabsItem>
                         <RadzenTabsItem Text="Train With Views">
                              <RadzenCard class="rz-background-color-base-900 rz-color-on-info-lighter rz-p-2">
                                <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H6" class="mb-0">Train With Views</RadzenText>

                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="build" class="mt-2 mb-4" Text="Train Model"
                                              Click="@BtnTrainWithViews" Disabled=@((this._viewDDLDocumentations == null) || (this._viewDDLDocumentations.Count<1)) />

                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add View Documentation"
                                              Click="@InsertRowView" Disabled=@(this._viewDocumentationToInsert != null || this._viewDocumentationToUpdate != null) />
                                @if (_isLoadingTrainWithViews)
                                {
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }

                                <RadzenDataGrid @ref="_viewDDLDocumentationsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true"
                                                PageSize="3" AllowSorting="true" EditMode="DataGridEditMode.Single" FilterMode="FilterMode.Advanced"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                Data="@_viewDDLDocumentations" TItem="DDLDocumentation" RowUpdate="@OnUpdateRowViews"
                                                RowCreate="@OnCreateRowViews" Sort="@ResetViewGenVars" Page="@ResetViewGenVars" Filter="@ResetViewGenVars"
                                                class="rz-background-color-base-900 rz-color-on-info-lighter rz-p-2">

                                    <Columns>
                                        <RadzenDataGridColumn TItem="DDLDocumentation" Property="name" Title="Table Name" Width="20%">

                                            <EditTemplate Context="tname">
                                                <RadzenDropDownDataGrid @bind-Value=@tname.name Data=@this._allViews
                                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        AllowClear=true Placeholder="Select View" AllowFiltering="true" Chips="true" PageSize="4" ShowPagingSummary="true"
                                                                        class="rz-background-color-base-200 rz-color-on-info-lighter">

                                                </RadzenDropDownDataGrid>
                                            </EditTemplate>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="DDLDocumentation" Property="documentation" Title="documentation" Width="60%">
                                            <Template Context="data">
                                                <RadzenTextArea ReadOnly="@((this._viewDocumentationToUpdate == null) && (this._viewDocumentationToInsert  == null))" @bind-Value="@data.documentation" Style="width: 100%;" />
                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="DDLDocumentation" Context="doc" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                            <Template Context="doc">
                                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRowViews(doc))" @onclick:stopPropagation="true">
                                                </RadzenButton>
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowViews(doc))" @onclick:stopPropagation="true">
                                                </RadzenButton>
                                            </Template>
                                            <EditTemplate Context="doc">
                                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRowViews(doc))">
                                                </RadzenButton>
                                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEditViews(doc))">
                                                </RadzenButton>
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowViews(doc))">
                                                </RadzenButton>
                                            </EditTemplate>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                    </RadzenCard>
                            </RadzenTabsItem>
                         <RadzenTabsItem Text="Train With SQL">
                              <RadzenCard class="rz-background-color-base-900 rz-color-on-info-lighter rz-p-2">  
                                <RadzenCard>
                                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="build" class="mt-2 mb-4" Text="Train Model"
                                                  Click="@BtnTrainWithSQL" />

                                    @if (_isLoadingTrainWithSql)
                                    {
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    }

                                    <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H6" class="mb-0">Train With SQL</RadzenText>
                                    <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Left">
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenCard>
                                                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.H3">SQL Query</RadzenText>
                                                <RadzenTextArea Rows="10" @bind-Value=@_sqlStatementForTrain class="w-100" />
                                            </RadzenCard>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenCard>
                                </RadzenCard>
                            </RadzenTabsItem>
                         <RadzenTabsItem Text="Train With Documentation">
                                <RadzenCard class="rz-background-color-base-900 rz-color-on-info-lighter rz-p-2">
                                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="build" class="mt-2 mb-4" Text="Train Model"
                                                  Click="@BtnTrainWithDocumentation" />
                                    @if (_isLoadingTrainWithDocumentation)
                                    {
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    }


                                    <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H6" class="mb-0">Train With Documentation</RadzenText>
                                    <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Left">
                                        <RadzenColumn Size="12" SizeMD="8">
                                            <RadzenCard>
                                                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.H3">Documentation</RadzenText>
                                                <RadzenTextArea Rows="10" @bind-Value=@_documentationForTrain class="w-100" />
                                            </RadzenCard>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenCard>
                            </RadzenTabsItem>

                        </Tabs>
                    </RadzenTabs>
                }
                <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenCard>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Info Log</RadzenText>
                            <RadzenTextArea Rows="5" Disabled="true" @bind-Value=@_infomsgs class="w-100" />
                        </RadzenCard>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Ask Questions" Disabled="@_DisabledStep4">
            <RadzenCard class="rz-background-color-base-900 rz-color-on-info-lighter rz-p-2">
                <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H6" class="mb-0">Ask Questions</RadzenText>
                <RadzenButton  ButtonStyle="ButtonStyle.Primary" Icon="build" class="mt-2 mb-4" Text="Ask Vanna"
                              Click="@BtnAskVanna" />
                @if (_isLoadingAskQuestions)
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
                <RadzenColumn Size="12" SizeMD="12"  >
                    <RadzenRow Gap="6rem" JustifyContent="JustifyContent.Center">

                        <RadzenCard Style="width=40%"> 
                            <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.H3">User Question</RadzenText>
                            <RadzenTextArea Cols="80" Rows="17" @bind-Value=@_userQuestion />
                         </RadzenCard> 

                        <RadzenCard Style="width=40%">
                            <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.H3">Vanna Response</RadzenText>
                            <RadzenTextArea Cols="80" Rows="17" @bind-Value=@_vannaResponse />
                         </RadzenCard>
                    </RadzenRow>
                </RadzenColumn>
                <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenCard>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Info Log</RadzenText>
                            <RadzenTextArea Rows="4" Disabled="true" @bind-Value=@_infomsgs class="w-100" />
                        </RadzenCard>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>


@code {

    private Credentials _sqlServerCredentials;
    private VannaModel _vannaModel;

    private VannaUtilitiesService _vannaUtilitiesService;

    private string _infomsgs;
    private bool _DisabledStep2 = true;
    private bool _DisabledStep3 = true;
    private bool _DisabledStep4 = true;

    private bool _isLoadingConnectToVanna;
    private bool _isLoadingTrainWithTables;
    private bool _isLoadingTrainWithViews;
    private bool _isLoadingTrainWithSql;
    private bool _isLoadingTrainWithDocumentation;
    private bool _isLoadingAskQuestions;

    TabPosition tabPosition = TabPosition.Top;

    private List<string> _allTables;
    //private List<string> _selectedTables;

    private List<string> _allViews;
    //private List<string> _selectedViews;

    private string _userQuestion = "";
    private string _vannaResponse = "";

    private List<DDLDocumentation> _tableDDLDocumentations;
    private List<DDLDocumentation> _viewDDLDocumentations;
    private string _sqlStatementForTrain;
    private string _documentationForTrain;

    RadzenDataGrid<DDLDocumentation> _tableDDLDocumentationsGrid;
    RadzenDataGrid<DDLDocumentation> _viewDDLDocumentationsGrid;

    DDLDocumentation _tableDocumentationToInsert;
    DDLDocumentation _tableDocumentationToUpdate;
    DDLDocumentation _tableDocumentationSafe;

    DDLDocumentation _viewDocumentationToInsert;
    DDLDocumentation _viewDocumentationToUpdate;
    DDLDocumentation _viewDocumentationSafe;

    //General Code
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _sqlServerCredentials = new Credentials();
        _vannaModel = new VannaModel();
        _vannaUtilitiesService = new VannaUtilitiesService();
        _tableDDLDocumentations = new List<DDLDocumentation>();
        _viewDDLDocumentations = new List<DDLDocumentation>();
        _sqlStatementForTrain = "";
        _documentationForTrain = "";

        _isLoadingConnectToVanna = false;
        _isLoadingTrainWithTables = false;
        _isLoadingTrainWithViews = false;
        _isLoadingTrainWithSql = false;

    }

    void OnChangeTab(int index)
    {
        //console.Log($"Tab with index {index} was selected.");
    }

    private bool GetAllInitialDataForStep3()
    {
        try
        {
            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:getAllTableNames"].ToString());
            string error = "";

            this._allTables = _vannaUtilitiesService.GetInfosFromDB(urlBuilder.ToString(), this._sqlServerCredentials, out error);
            if (this._allTables == null)
            {
                this._infomsgs = $"GetInfosFromDB returns null. Error message: {error}";
                return false;
            }
            urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:getAllViewNames"].ToString());

            this._allViews = _vannaUtilitiesService.GetInfosFromDB(urlBuilder.ToString(), this._sqlServerCredentials, out error);
            if (this._allViews == null)
            {
                this._infomsgs = $"GetInfosFromDB returns null. Error message: {error}";
                return false;
            }

            DDLDocumentation d = new DDLDocumentation();
            return true;

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in GetAllInitialData. Exception message: {exc.Message}";
            return false;
        }
    }

    private void OnChangeStep(int index)
    {
        this._infomsgs = String.Empty;
        if (index == 1)
        {

        }
        else if (index == 2)
        {

        }
    }

    //Step 1 Code
    private void CheckConnection(Credentials arg)
    {
        //Code Only For Windows Authentication
        this._infomsgs = "";
        try
        {

            string error = "";
            bool connSuccess = SQLServerLib.CheckConnection(this._sqlServerCredentials.Server.Trim(),
                                                            this._sqlServerCredentials.Database.Trim(), out error);
            if (connSuccess)
            {
                this._infomsgs = "Connect to database Success!";
                this._DisabledStep2 = false;

            }
            else
            {
                this._infomsgs = $"Connect to database Failed. Error message: {error}";
            }
        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in CheckConnection. Exception message: {exc.Message}";
        }
    }


    ///--------------------------------------------------------///
    ///--------------------------------------------------------///
    ///--------------------------------------------------------///

    //Step 2 Code
    async Task CreateOrSetModel(VannaModel arg)
    {
        //Code Only For Windows Authentication
        this._infomsgs = "";
        try
        {
            this._isLoadingConnectToVanna = true;
            this.StateHasChanged();

            await Task.Run(async () =>
       {
           StringBuilder urlBuilder = new StringBuilder();
           urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
           urlBuilder.Append("/");
           _vannaModel.ModelName = _vannaModel.ModelName.ToLower();
           if (this._vannaModel.NewModel)
           {
               urlBuilder.Append(configuration["ApplicationInfo:createModelService"].ToString());
               string error = "";
               if (_vannaUtilitiesService.CheckIfVannaModelExistOrCreated(urlBuilder.ToString(), this._vannaModel.ModelName.ToLower(), out error))
               {
                   _infomsgs = $"The model {this._vannaModel.ModelName} Created. You can use it!";

                   if (GetAllInitialDataForStep3())
                   {
                       _infomsgs += "\n" + "Initial data for Step 3 are set";
                       this._DisabledStep3 = false;
                       this._DisabledStep4 = false;
                   }
               }
               else
               {
                   this._DisabledStep3 = true;
                   this._DisabledStep4 = true;
                   _infomsgs = $"Something went wrong. Error message: {error}. If the name exists try amother name." +
               "If you want to use an existing model deselect the Create Model option and try again!";
               }
           }
           else
           {
               urlBuilder.Append(configuration["ApplicationInfo:checkIfModelExistService"].ToString());
               string error = "";
               //Vanna saves the model names with lower characters
               if (_vannaUtilitiesService.CheckIfVannaModelExistOrCreated(urlBuilder.ToString(), this._vannaModel.ModelName.ToLower(), out error))
               {
                   _infomsgs = $"The model {this._vannaModel.ModelName} Exist. You can use it!";
                   if (GetAllInitialDataForStep3())
                   {
                       _infomsgs += "\n" + "Initial data for Step 3 are set";
                       this._DisabledStep3 = false;
                       this._DisabledStep4 = false;
                   }

               }
               else
               {
                   this._DisabledStep3 = true;
                   this._DisabledStep4 = true;
                   _infomsgs = $"Something went wrong. Error message: {error}";
               }
           }
       });

            this._isLoadingConnectToVanna = false;
            this.StateHasChanged();

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in CreateOrSetModel. Exception message: {exc.Message}";
        }
    }

    //Step 3
    //Tables Grid Handling
    void ResetTableGenVars()
    {
        _tableDocumentationToInsert = null;
        _tableDocumentationToUpdate = null;
    }
    void ResetViewGenVars()
    {
        _viewDocumentationToInsert = null;
        _viewDocumentationToUpdate = null;
    }
    async Task EditRowTables(DDLDocumentation tdoc)
    {

        this._tableDocumentationSafe = new DDLDocumentation();
        _tableDocumentationSafe.documentation = tdoc.documentation;
        _tableDocumentationSafe.name = tdoc.name;

        this._tableDocumentationToUpdate = tdoc;
        await this._tableDDLDocumentationsGrid.EditRow(this._tableDocumentationToUpdate);
        //ResetTableGenVars();
    }
    async Task EditRowViews(DDLDocumentation tdoc)
    {
        this._viewDocumentationSafe = new DDLDocumentation();
        _viewDocumentationSafe.documentation = tdoc.documentation;
        _viewDocumentationSafe.name = tdoc.name;

        this._viewDocumentationToUpdate = tdoc;
        await this._viewDDLDocumentationsGrid.EditRow(this._viewDocumentationToUpdate);
        //ResetViewGenVars();
    }
    void OnUpdateRowTables(DDLDocumentation tdoc)
    {
        this._tableDocumentationToUpdate = tdoc;
        this._tableDDLDocumentationsGrid.Reload();
        ResetTableGenVars();

    }
    void OnUpdateRowViews(DDLDocumentation tdoc)
    {
        this._viewDocumentationToUpdate = tdoc;
        this._viewDDLDocumentationsGrid.Reload();
        ResetViewGenVars();
    }
    async Task SaveRowTables(DDLDocumentation tdoc)
    {
        if (string.IsNullOrEmpty(tdoc.name))
        {
            this._infomsgs = "Select Table to insert row!";
            return;
        }
        if (string.IsNullOrEmpty(tdoc.documentation))
        {
            this._infomsgs = "Add documentation to insert row!";
            return;
        }
        await this._tableDDLDocumentationsGrid.UpdateRow(tdoc);
    }
    async Task SaveRowViews(DDLDocumentation tdoc)
    {
        if (string.IsNullOrEmpty(tdoc.name))
        {
            this._infomsgs = "Select View to insert row!";
            return;
        }
        if (string.IsNullOrEmpty(tdoc.documentation))
        {
            this._infomsgs = "Add documentation to insert row!";
            return;
        }
        await this._viewDDLDocumentationsGrid.UpdateRow(tdoc);
    }
    void CancelEditTables(DDLDocumentation tdoc)
    {
        if (this._tableDDLDocumentations.Any(i => i.name.Equals(tdoc.name) && i.documentation.Equals(tdoc.documentation)))
        {
            int index = this._tableDDLDocumentations.FindIndex(i => i.name.Equals(tdoc.name) && i.documentation.Equals(tdoc.documentation));
            if (index != -1)
                this._tableDDLDocumentations[index] = this._tableDocumentationSafe;
            ResetTableGenVars();
            this._tableDDLDocumentationsGrid.CancelEditRow(tdoc);
            this._tableDDLDocumentationsGrid.Reload();
        }
        else
        {
            ResetTableGenVars();
            this._tableDDLDocumentationsGrid.CancelEditRow(tdoc);
            this._tableDDLDocumentationsGrid.Reload();
        }

    }
    void CancelEditViews(DDLDocumentation tdoc)
    {
        if (this._viewDDLDocumentations.Any(i => i.name.Equals(tdoc.name) && i.documentation.Equals(tdoc.documentation)))
        {
            int index = this._viewDDLDocumentations.FindIndex(i => i.name.Equals(tdoc.name) && i.documentation.Equals(tdoc.documentation));
            if (index != -1)
                this._viewDDLDocumentations[index] = this._viewDocumentationSafe;
            ResetViewGenVars();
            this._viewDDLDocumentationsGrid.CancelEditRow(tdoc);
            this._viewDDLDocumentationsGrid.Reload();
        }
        else
        {
            ResetViewGenVars();
            this._viewDDLDocumentationsGrid.CancelEditRow(tdoc);
            this._viewDDLDocumentationsGrid.Reload();
        }
    }
    async Task DeleteRowTables(DDLDocumentation tdoc)
    {
        ResetTableGenVars();

        if (this._tableDDLDocumentations.Contains(tdoc))
        {
            this._tableDDLDocumentations.Remove(tdoc);

            await this._tableDDLDocumentationsGrid.Reload();
        }
        else
        {
            this._tableDDLDocumentationsGrid.CancelEditRow(tdoc);
            await this._tableDDLDocumentationsGrid.Reload();
        }
    }
    async Task DeleteRowViews(DDLDocumentation tdoc)
    {
        ResetViewGenVars();

        if (this._viewDDLDocumentations.Contains(tdoc))
        {
            this._viewDDLDocumentations.Remove(tdoc);

            await this._viewDDLDocumentationsGrid.Reload();
        }
        else
        {
            this._viewDDLDocumentationsGrid.CancelEditRow(tdoc);
            await this._viewDDLDocumentationsGrid.Reload();
        }
    }
    async Task BtnTrainWithTables()
    {
        try
        {
            this._isLoadingTrainWithTables = true;
            this.StateHasChanged();

            this._infomsgs = "";
            if (this._tableDDLDocumentations == null)
            {
                this._infomsgs = "_tableDDLDocumentations is null";
                return;
            }

            await Task.Run(async () =>
      {
          List<string> tableNames = new List<string>();
          List<string> documentation = new List<string>();
          foreach (DDLDocumentation d in this._tableDDLDocumentations)
          {
              tableNames.Add(d.name);
              documentation.Add(d.documentation);
          }

          StringBuilder urlBuilder = new StringBuilder();
          urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
          urlBuilder.Append("/");
          urlBuilder.Append(configuration["ApplicationInfo:trainWithTables"].ToString());
          string errorMsg = "";

          if (this._vannaUtilitiesService.TrainModelWithTables(urlBuilder.ToString(), tableNames.Distinct().ToList(), this._vannaModel.ModelName.ToLower(), this._sqlServerCredentials, out errorMsg))
          {
              this._infomsgs = "Train with tables OK. Now will start the training with Documentation!";
          }
          else
          {
              this._infomsgs = $"Something went wrong in Train with tables. Message: {errorMsg}";
              this._isLoadingTrainWithTables = false;
              this.StateHasChanged();
              return;
          }

          TrainWithDocumentation(documentation);
      });

            this._isLoadingTrainWithTables = false;
            this.StateHasChanged();
            

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in BtnTrainWithTables. Exception message: {exc.Message}";
            this._isLoadingTrainWithTables = false;
            this.StateHasChanged();

            return;
        }
    }
    async Task BtnTrainWithDocumentation()
    {
        try
        {
            this._infomsgs = "";
            this._isLoadingTrainWithDocumentation = true;
            this.StateHasChanged();

        await Task.Run(async () =>
        {
            if (string.IsNullOrEmpty(this._documentationForTrain))
            {
                this._infomsgs = "Add some documentation!";
                return;
            }

            List<string> tmp = new List<string>();
            tmp.Add(this._documentationForTrain);
            TrainWithDocumentation(tmp);

        });

            this._isLoadingTrainWithDocumentation = false;
            this.StateHasChanged();
        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in BtnTrainWithDocumentation. Exception message: {exc.Message}";
            this._isLoadingTrainWithDocumentation = false;
            this.StateHasChanged();
        }

    }
    async Task BtnAskVanna() 
    {
        try
        {
           
            this._infomsgs = "";
            this._vannaResponse = "";

            if (string.IsNullOrEmpty(this._userQuestion))
            {
                this._infomsgs = "Insert a Question!";
                return;
            }

            this._isLoadingAskQuestions = true;
            this.StateHasChanged();

            await Task.Run(async () =>
        {
            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:generateSQL"].ToString());

            string error = "";
            this._vannaResponse = this._vannaUtilitiesService.GenerateSQL(urlBuilder.ToString(), this._userQuestion, this._vannaModel.ModelName.ToLower(), out error);
            if (string.IsNullOrEmpty(this._vannaResponse))
            {
                this._infomsgs = $"Something went wrong in Vanna Generate SQL. Error message: {error}";
                this._isLoadingAskQuestions = false;
                this.StateHasChanged();
                return;
            }
        });

            this._isLoadingAskQuestions = false;
            this.StateHasChanged();

        }
        catch (Exception exc)
        {
            _infomsgs = $"Exception in BtnAskVanna {exc.Message}.";
            this._isLoadingAskQuestions = false;
            this.StateHasChanged();
        }
    }
    async Task BtnTrainWithViews()
    {
        try
        {
            this._infomsgs = "";

            if (this._viewDDLDocumentations == null)
            {
                this._infomsgs = "_viewDDLDocumentations is null";
                return;
            }

            this._isLoadingTrainWithViews = true;
            this.StateHasChanged();

            await Task.Run(async () =>
        {
            List<string> viewNames = new List<string>();
            List<string> documentation = new List<string>();
            foreach (DDLDocumentation d in this._viewDDLDocumentations)
            {
                viewNames.Add(d.name);
                documentation.Add(d.documentation);
            }

            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:trainWithViews"].ToString());
            string errorMsg = "";

            if (this._vannaUtilitiesService.TrainModelWithViews(urlBuilder.ToString(), viewNames.Distinct().ToList(), this._vannaModel.ModelName.ToLower(), this._sqlServerCredentials, out errorMsg))
            {
                this._infomsgs = "Train with views OK. Now will start the training with Documentation!";
            }
            else
            {
                this._infomsgs = $"Something went wrong in Train with views. Message: {errorMsg}";
                this._isLoadingTrainWithViews = false;
                this.StateHasChanged();
                return;
            }

            TrainWithDocumentation(documentation);
        });


            this._isLoadingTrainWithViews = false;
            this.StateHasChanged();
           
        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in BtnTrainWithViews. Exception message: {exc.Message}";
            this._isLoadingTrainWithViews = false;
            this.StateHasChanged();
            return;
        }
    }
    async Task BtnTrainWithSQL()
    {
        try
        {
            this._infomsgs = "";

            if (string.IsNullOrEmpty(this._sqlStatementForTrain))
            {
                this._infomsgs = "SQL field is empty!";
                return;
            }

            this._isLoadingTrainWithSql = true;
            this.StateHasChanged();

            await Task.Run(async () =>
        {
            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:trainWithSQL"].ToString());
            string error = "";
            if (!this._vannaUtilitiesService.TrainWithDocumentation(urlBuilder.ToString(), this._sqlStatementForTrain.Trim(), this._vannaModel.ModelName.ToLower(), out error))
            {
                this._infomsgs += "\n" + $"Problem in BtnTrainWithSQL {this._sqlStatementForTrain.Trim()}.\n Exception message: {error}";
            }
            else
            {
                this._infomsgs += $"Training with SQL Ok";
            }
        });

            this._isLoadingTrainWithSql = false;
            this.StateHasChanged();
            
        }
        catch (Exception exc)
        {
            _infomsgs = $"Exception in BtnTrainWithSQL. Exception message: {exc.Message}";
            this._isLoadingTrainWithSql = false;
            this.StateHasChanged();
        }
    }
    async Task TrainWithDocumentation(List<string> documentation)
    {
        try
        {
            this._infomsgs = "";



            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:vannaMainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:trainWithDocumentation"].ToString());

            foreach (string doc in documentation)
            {
                string error = "";
                if (!this._vannaUtilitiesService.TrainWithDocumentation(urlBuilder.ToString(), doc, this._vannaModel.ModelName.ToLower(), out error))
                {
                    this._infomsgs += "\n" + $"Problem in train with documentation {doc}.\n Exception message: {error}";
                    return;
                }
            }

            this._infomsgs += "\n" + "Train with Documentation Ok";

        }
        catch (Exception exc)
        {
            this._infomsgs += "\n" + $"Exception in TrainWithDocumentation. Exception message:{exc.Message}";
        }

    }
    async Task InsertRowTable()
    {
        this._tableDocumentationToInsert = new DDLDocumentation();
        await this._tableDDLDocumentationsGrid.InsertRow(this._tableDocumentationToInsert);
    }
    async Task InsertRowView()
    {
        this._viewDocumentationToInsert = new DDLDocumentation();
        await this._viewDDLDocumentationsGrid.InsertRow(this._viewDocumentationToInsert);
    }
    void OnCreateRowTables(DDLDocumentation tdoc)
    {
        this._tableDocumentationToInsert = tdoc;
        this._tableDDLDocumentations.Add(this._tableDocumentationToInsert);
        ResetTableGenVars();
        this._tableDDLDocumentationsGrid.Reload();
    }
    void OnCreateRowViews(DDLDocumentation tdoc)
    {
        this._viewDocumentationToInsert = tdoc;
        this._viewDDLDocumentations.Add(this._viewDocumentationToInsert);
        ResetViewGenVars();
        this._viewDDLDocumentationsGrid.Reload();
    }
    
    //Step 4
    //
}