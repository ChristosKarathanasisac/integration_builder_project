@page "/usevanna"
@using IntegrationBuilder.SQLServerUtilities;
@using IntegrationBuilder.VannaAIUtilities;
@using Microsoft.EntityFrameworkCore 
@using System.Text;
@inject IConfiguration configuration

<RadzenSteps Change=@OnChangeStep>
    <Steps>
        <RadzenStepsItem Text="Connect To SQL Server">
            <RadzenTemplateForm TItem="Credentials"  Data=@_sqlServerCredentials Submit=@CheckConnection>
                
                <RadzenFieldset Class="rz-color-secondary" Text="Connect To SQL Server" >
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="9" SizeMD="3">
                    <RadzenStack>
                        <RadzenLabel Component="Server" Text="Server" />
                                <RadzenTextBox Name="Server" @bind-Value=@_sqlServerCredentials.Server />
                            <RadzenRequiredValidator Component="Server" Text="Server is required!" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center" >
                    <RadzenColumn Size="9" SizeMD="3">
                    <RadzenStack>
                        <RadzenLabel Component="Database" Text="Database" Class="rz-info-light" />
                                <RadzenTextBox Name="Database" @bind-Value=@_sqlServerCredentials.Database />
                            <RadzenRequiredValidator Component="Database" Text="Database is required!" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Check Connection" />
                </RadzenStack>
                    <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Center">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenCard>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Info Log</RadzenText>
                                <RadzenTextArea Disabled="true" @bind-Value=@_infomsgs class="w-100" />
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                    
                </RadzenFieldset>
            </RadzenTemplateForm>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Create/Set Vanna AI Model" Disabled="@_DisabledStep2">
            <RadzenTemplateForm TItem="VannaModel" Data=@this._vannaModel Submit=@CreateOrSetModel>

                <RadzenFieldset Class="rz-color-secondary" Text="Create/Set Vanna AI Model">
                    <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                        <RadzenColumn Size="9" SizeMD="3">
                            <RadzenStack>
                                <RadzenLabel Component="ModelName" Text="Vanna model" />
                                <RadzenTextBox Name="ModelName" @bind-Value=@_vannaModel.ModelName />
                                <RadzenRequiredValidator Component="ModelName" Text="Vanna model is required!" />
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                        <RadzenColumn Size="9" SizeMD="3">
                            <RadzenStack>
                                <div class="rz-p-12 rz-text-align-center">
                                    <RadzenCheckBox @bind-Value=@_vannaModel.NewModel Name="isNewModel" />
                                    <RadzenLabel Text="Create New Model" Component="isNewModel" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Create/Set Model" />
                    </RadzenStack>
                    <RadzenRow Gap="2rem" JustifyContent="JustifyContent.Center">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenCard>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Info Log</RadzenText>
                                <RadzenTextArea Disabled="true" @bind-Value=@_infomsgs class="w-100" />
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>

                </RadzenFieldset>
            </RadzenTemplateForm>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Train Your Model" Disabled="@_DisabledStep3">
            <RadzenCard>
                @if (true)
                {
                    GetAllInitialData();
                }
                @if ((this._allTables != null) && (_allViews != null))
                {
                    <div class="container-fluid">
                        <div class="row my-5">
                            <div class="col-md-4">
                                <RadzenCard>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-0">Train with Tables</RadzenText>
                                    <style>
                                        .rz-grid-table {
                                            width: unset;
                                        }
                                    </style>
                                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Documentation"
                                                  Click="@InsertRow" Disabled=@(this._ddlDocumentationToInsert != null || this._ddlDocumentationToUpdate != null) />


                                    <RadzenDataGrid @ref="_tableDDLDocumentationsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true"
                                                    PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                                                    Data="@_tableDDLDocumentations" TItem="DDLDocumentation" RowUpdate="@OnUpdateRowTables"
                                                    RowCreate="@OnCreateRowTables" Sort="@ResetTableGenVars" Page="@ResetTableGenVars" Filter="@ResetTableGenVars" ColumnWidth="200px">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="DDLDocumentation" Property="name" Title="Table Name">
                                                @* <EditTemplate Context="tname">
                                                    <RadzenDropDown @bind-Value=@tname.name Data=@this._allTables TextProperty="name" ValueProperty="name"
                                                                    AllowClear=true Placeholder="Select Table" AllowFiltering="true" Chips="true">

                                                    </RadzenDropDown>
                                                </EditTemplate> *@
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="DDLDocumentation" Property="documentation" Title="documentation">
                                                <Template Context="data">
                                                    <RadzenTextBox @bind-Value="@data.documentation" Style="width: 100%;" />
                                                </Template>
                                            </RadzenDataGridColumn>


                                            <RadzenDataGridColumn TItem="DDLDocumentation" Context="doc" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                                <Template Context="doc">
                                                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRowTables(doc))" @onclick:stopPropagation="true">
                                                    </RadzenButton>
                                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowTables(doc))" @onclick:stopPropagation="true">
                                                    </RadzenButton>
                                                </Template>
                                                <EditTemplate Context="doc">
                                                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRowTables(doc))">
                                                    </RadzenButton>
                                                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEditTables(doc))">
                                                    </RadzenButton>
                                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowTables(doc))">
                                                    </RadzenButton>
                                                </EditTemplate>
                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenCard>
                            </div>
                            <div class="col-md-4">
                                <RadzenCard>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-0">Train with Views</RadzenText>
                                </RadzenCard>
                            </div>
                            <div class="col-md-4">
                                <RadzenCard>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-0">Train With SQL</RadzenText>
                                </RadzenCard>
                            </div>
                        </div>
                    </div>
                }
                
            </RadzenCard>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Ask Questions" Disabled="@_DisabledStep4">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">2. Hello From Step 4</RadzenText>
        </RadzenStepsItem>
        
    </Steps>
</RadzenSteps>


@code {

    RadzenDataGrid<DDLDocumentation> _tableDDLDocumentationsGrid;
    DDLDocumentation _ddlDocumentationToInsert;
    DDLDocumentation _ddlDocumentationToUpdate;


    private Credentials _sqlServerCredentials;
    private VannaModel _vannaModel;

    private VannaUtilitiesService _vannaUtilitiesService;

    private string _infomsgs;
    private bool _DisabledStep2 = true;
    private bool _DisabledStep3 = true;
    private bool _DisabledStep4 = true;


    private List<string> _allTables;
    private List<string> _selectedTables;

    private List<string> _allViews;
    private List<string> _selectedViews;

    private List<DDLDocumentation> _tableDDLDocumentations;

    //General Code
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _sqlServerCredentials = new Credentials();
        _vannaModel = new VannaModel();
        _vannaUtilitiesService = new VannaUtilitiesService();
        _tableDDLDocumentations = new List<DDLDocumentation>();
        DDLDocumentation  d = new DDLDocumentation();
        d.name = "MTRL";
        d.documentation = "Test documentation";
        this._tableDDLDocumentations.Add(d);


    }

    private void GetAllInitialData()
    {
        try
        {
            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:mainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:getAllTableNames"].ToString());
            string error = "";

            this._allTables = _vannaUtilitiesService.GetInfosFromDB(urlBuilder.ToString(), this._sqlServerCredentials, out error);
            if (this._allTables == null)
            {
                this._infomsgs = $"GetInfosFromDB returns null. Error message: {error}";
                return;
            }
            _tableDDLDocumentations = new List<DDLDocumentation>();


            urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:mainURL"].ToString());
            urlBuilder.Append("/");
            urlBuilder.Append(configuration["ApplicationInfo:getAllViewNames"].ToString());

            this._allViews = _vannaUtilitiesService.GetInfosFromDB(urlBuilder.ToString(), this._sqlServerCredentials, out error);
            if (this._allViews == null)
            {
                this._infomsgs = $"GetInfosFromDB returns null. Error message: {error}";
                return;
            }

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in GetAllInitialData. Exception message: {exc.Message}";
            return;
        }
    }

    private void OnChangeStep(int index)
    {
        this._infomsgs = String.Empty;
        if (index == 1)
        {

        }
        else if (index == 2)
        {

        }
    }

    //Step 1 Code
    private void CheckConnection(Credentials arg)
    {
        //Code Only For Windows Authentication
        this._infomsgs = "";
        try
        {

            string error = "";
            bool connSuccess = SQLServerLib.CheckConnection(this._sqlServerCredentials.Server.Trim(),
                                                            this._sqlServerCredentials.Database.Trim(), out error);
            if (connSuccess)
            {
                this._infomsgs = "Connect to database Success!";
                this._DisabledStep2 = false;
            }
            else
            {
                this._infomsgs = $"Connect to database Failed. Error message: {error}";
            }
        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in CheckConnection. Exception message: {exc.Message}";
        }
    }


    ///--------------------------------------------------------///
    ///--------------------------------------------------------///
    ///--------------------------------------------------------///

    //Step 2 Code
    private void CreateOrSetModel(VannaModel arg)
    {
        //Code Only For Windows Authentication
        this._infomsgs = "";
        try
        {
            StringBuilder urlBuilder = new StringBuilder();
            urlBuilder.Append(configuration["ApplicationInfo:mainURL"].ToString());
            urlBuilder.Append("/");
            if (this._vannaModel.NewModel)
            {
                urlBuilder.Append(configuration["ApplicationInfo:createModelService"].ToString());
                string error = "";
                if (_vannaUtilitiesService.CheckIfVannaModelExistOrCreated(urlBuilder.ToString(), this._vannaModel.ModelName, out error))
                {
                    _infomsgs = $"The model {this._vannaModel.ModelName} Created. You can use it!";
                    this._DisabledStep3 = false;
                }
                else
                {
                    this._DisabledStep3 = true;
                    _infomsgs = $"Something went wrong. Error message: {error}. If the name exists try amother name."+
                    "If you want to use an existing model deselect the Create Model option and try again!";
                }
            }
            else
            {
                urlBuilder.Append(configuration["ApplicationInfo:checkIfModelExistService"].ToString());
                string error = "";
                if (_vannaUtilitiesService.CheckIfVannaModelExistOrCreated(urlBuilder.ToString(), this._vannaModel.ModelName, out error))
                {
                    _infomsgs = $"The model {this._vannaModel.ModelName} Exist. You can use it!";
                    this._DisabledStep3 = false;
                }
                else
                {
                    this._DisabledStep3 = true;
                    _infomsgs = $"Something went wrong. Error message: {error}";
                }
            }

        }
        catch (Exception exc)
        {
            this._infomsgs = $"Exception in CreateOrSetModel. Exception message: {exc.Message}";
        }
    }

    //Step 3
    //Tables Grid Handling
    void ResetTableGenVars()
    {
        _ddlDocumentationToInsert = null;
        _ddlDocumentationToUpdate = null;
    }

    async Task EditRowTables(DDLDocumentation tdoc)
    {
        this._ddlDocumentationToUpdate = tdoc;
        await this._tableDDLDocumentationsGrid.EditRow(tdoc);
    }

    void OnUpdateRowTables(DDLDocumentation tdoc)
    {
        ResetTableGenVars();
    }

    async Task SaveRowTables(DDLDocumentation tdoc)
    {
        await this._tableDDLDocumentationsGrid.UpdateRow(tdoc);
    }

    void CancelEditTables(DDLDocumentation tdoc)
    {
        ResetTableGenVars();

        this._tableDDLDocumentationsGrid.CancelEditRow(tdoc);

    }


    async Task DeleteRowTables(DDLDocumentation tdoc)
    {
        ResetTableGenVars();

        // if (this._tableDDLDocumentationsGrid.Contains(tdoc))
        // {
        //     dbContext.Remove<Order>(order);

        //     dbContext.SaveChanges();

        //     await ordersGrid.Reload();
        // }
        // else
        // {
        //     ordersGrid.CancelEditRow(order);
        //     await ordersGrid.Reload();
        // }
    }

    async Task InsertRow()
    {
        this._ddlDocumentationToInsert = new DDLDocumentation();
        await this._tableDDLDocumentationsGrid.InsertRow(this._ddlDocumentationToInsert);
    }

    void OnCreateRowTables(DDLDocumentation tdoc)
    {
        this._ddlDocumentationToInsert = tdoc;
        this._tableDDLDocumentations.Add(this._ddlDocumentationToInsert);
    }
}